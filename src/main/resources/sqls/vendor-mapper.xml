<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mvsolutions.payus.mapper.VendorMapper">
    <resultMap id="VendorStoreManagementStoreInfo"
               type="com.mvsolutions.payus.model.web.vendor.response.storemanagement.VendorStoreManagementStoreInfo">
        <result column="image_list" property="image_list" typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <resultMap id="VendorStoreManagementStoreDetailInfo"
               type="com.mvsolutions.payus.model.web.vendor.response.storemanagement.VendorStoreManagementStoreDetailInfo">
        <result column="service_list" property="service_list"
                typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
        <result column="information" property="information"
                typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <resultMap id="StoreGoods"
               type="com.mvsolutions.payus.model.web.vendor.response.goodsmanagement.StoreGoods">
        <result column="room_options" property="room_options"
                typeHandler="com.mvsolutions.payus.handler.JsonRoomTypeHandler"/>
    </resultMap>
    <resultMap id="VendorStoreManagementReviewDetail"
               type="com.mvsolutions.payus.model.web.vendor.response.storemanagement.VendorStoreManagementReviewDetail">
        <result column="image_list" property="image_list"
                typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <select id="checkVendorExists" resultType="_boolean">
        select EXISTS(select * from vendor WHERE id = #{id} AND password = #{password})
    </select>
    <select id="loginVendor" resultType="VendorLoginResponse">
        select vendor_no, valid_vendor, vendor_penalty
        from vendor
        WHERE id = #{id}
          AND password = #{password}
    </select>
    <select id="checkVendorPenalty" resultType="_boolean">
        select vendor_penalty
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorName" resultType="string">
        select vendor_name
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorHome" resultType="VendorHomeResponse">
        select name, point, vendor.vendor_no as vendor_no, vendor_name
        from store,
             vendor
        WHERE store.vendor_no = #{vendor_no}
          AND vendor.vendor_no = #{vendor_no}
    </select>
    <select id="getVendorPoint" resultType="SupPointChargeDataResponse">
        select vendor_no, point
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <update id="requestPayback">
        update vendor
        SET point = point - #{point}
        WHERE vendor_no = #{vendor_no}
    </update>
    <select id="getVendorFCMToken" resultType="string">
        select fcm_token
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <update id="updateVendorFcmToken">
        update vendor
        SET fcm_token = #{fcm_token}
        WHERE vendor_no = #{vendor_no}
    </update>
    <select id="findIdVendor" resultType="string">
        select id
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="vendorFindIdPost" resultType="VendorFindIdResponse">
        select vendor_no
        from vendor
        WHERE vendor_name = #{name}
          AND phone = #{phone}
    </select>
    <select id="findPassword" resultType="VendorPasswordFindResponse">
        SET @Vendor_NO = (select vendor_no
                          from vendor
                          WHERE id = #{id});
        select EXISTS(select * from vendor WHERE id = #{id})                    as id_exist,
               IF(EXISTS(select * from vendor WHERE id = #{id}), @Vendor_NO, 0) as vendor_no
    </select>
    <select id="getPasswordFindResult" resultType="VendorPasswordFindResultData">
        select vendor_no, id
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="checkVendorCurrentPassword" resultType="_boolean">
        select IF(password = #{password}, TRUE, FALSE)
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <update id="resetPassword">
        update vendor
        SET password = #{password}
        WHERE vendor_no = #{vendor_no}
    </update>
    <select id="checkVendorExistsByEmail" resultType="_boolean">
        select EXISTS(select * from vendor WHERE id = #{email})
    </select>
    <insert id="insertVendor" useGeneratedKeys="true" keyProperty="vendor_no">
        insert into vendor(id, password, vendor_name, business_code, phone, bank_name, bank_account, bank_owner,
                           reg_date)
        VALUES (#{id}, #{password}, #{vendor_name}, #{business_code}, #{phone}, #{bank_name}, #{bank_account},
                #{bank_owner}, #{reg_date})
    </insert>
    <select id="getVendorInfoForMyPage" resultType="VendorMyPageInfo">
        select id, vendor_name as name, phone, bank_name, bank_account, bank_owner
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorBusinessInfoForMyPage" resultType="VendorMyPageBusinessInfo">
        select store.name as store_name, vendor.business_code, vendor.vendor_name
        from store,
             vendor
        WHERE vendor.vendor_no = #{vendor_no}
          AND store.vendor_no = #{vendor_no}
    </select>
    <select id="getVendorStoreInfoForStoreManagement" resultType="VendorStoreManagementStoreInfo"
            resultMap="VendorStoreManagementStoreInfo">
        select store.store_no,
               store.image_list,
               store.name       as store_name,
               store.`explain`,
               store.address,
               store.address_x,
               store.address_y,
               store.address_road,
               vendor.phone,
               store.class_first,
               store.class_second,
               IF(EXISTS(select *
                         from advertisement_store
                         WHERE advertisement_store.store_no = store.store_no
                           AND status = true), advertise_payback,
                  payback_rate) as payback_rate
        from vendor,
             store
                 left join advertisement_store on store.store_no = advertisement_store.store_no
        WHERE vendor.vendor_no = #{vendor_no}
          AND store.vendor_no = #{vendor_no}
    </select>
    <select id="getVendorStoreDetailForStoreManagement" resultType="VendorStoreManagementStoreDetailInfo"
            resultMap="VendorStoreManagementStoreDetailInfo">
        select store.store_no,
               store.class_first,
               store.class_second,
               store.explain,
               store_lodgement.service_list,
               store_lodgement.information
        from store,
             store_lodgement
        WHERE store.vendor_no = #{vendor_no}
          AND store_lodgement.store_no = store.store_no
    </select>
    <select id="getVendorReviewListForStoreManagementInit" resultType="VendorStoreManagementReviewInfo">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select review.review_no,
               review.content,
               review.rate,
               user.nickname as user_name,
               review.reg_date,
               review.answer_status
        from review,
             user
        WHERE review.store_no = @StoreNo
          AND user.user_no = review.user_no
        ORDER BY review.reg_date DESC
        LIMIT 10
    </select>
    <select id="getReviewListCallDataByPagination" resultType="VendorStoreManagementReviewInfo">
        SET @StoreNo = (select store_no
        from store
        WHERE vendor_no = #{vendor_no});
        select review.review_no,
        review.content,
        review.rate,
        user.nickname as user_name,
        review.reg_date,
        review.answer_status
        from review,
        user
        WHERE review.store_no = @StoreNo
        AND user.user_no = review.user_no
        <choose>
            <when test="data_type == 2">
                AND answer_status = true
            </when>
            <when test="data_type == 3">
                AND answer_status = false
            </when>
        </choose>
        ORDER BY review.reg_date DESC
        LIMIT #{start_index}, 10
    </select>
    <select id="getVendorStoreGoodsList" resultType="StoreGoods" resultMap="StoreGoods">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select room_options
        from store_lodgement
        WHERE store_no = @StoreNo
    </select>
    <select id="getPaybackRateForRegisterGoods" resultType="int">
        select IF(EXISTS(select *
                         from advertisement_store
                         WHERE advertisement_store.store_no = store.store_no
                           AND status = true), advertise_payback,
                  payback_rate) as payback_rate
        from store
                 left join advertisement_store on store.store_no = advertisement_store.store_no
        WHERE store.vendor_no = #{vendor_no}
    </select>
    <update id="updateVendorFCMToken">
        update vendor
        SET fcm_token = #{fcm_token}
        WHERE vendor_no = #{vendor_no}
    </update>
    <select id="getVendorAdminPointChargeList" resultType="VendorAdminPointChargeList">
        select charge_no, point, reg_date, revise_date, status
        from point_charge
        WHERE vendor_no = #{vendor_no}
        ORDER BY reg_date DESC
        LIMIT 10
    </select>
    <select id="getVendorPointChargeListNumber" resultType="int">
        select COUNT(*)
        from point_charge
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorPointValue" resultType="int">
        select point
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorAdminPointAccumulateList" resultType="VendorAdminPointAccumulateList">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select accumulate_no,
               user.nickname                        as user_name,
               price,
               payback_rate,
               point_accumulate.point,
               point_accumulate.reg_date,
               status,
               review_status,
               IF(answer_date is NULL, false, true) as is_answered
        from point_accumulate,
             user
        WHERE point_accumulate.store_no = @StoreNo
          AND user.user_no = point_accumulate.user_no
        ORDER BY point_accumulate.reg_date DESC
        LIMIT 10
    </select>
    <select id="getVendorPointAccumulateListNumber" resultType="int">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select COUNT(*)
        from point_accumulate
        WHERE store_no = @StoreNo
    </select>
    <select id="getNoticeList" resultType="VendorAdminNoticeList">
        select notice_no, title, reg_date, view_num
        from notice
        ORDER BY reg_date DESC
        LIMIT 10
    </select>
    <select id="getNoticeNum" resultType="int">
        select COUNT(*)
        from notice
    </select>
    <select id="getFAQList" resultType="VendorAdminFAQList">
        select faq_no, question, answer, type, reg_date, view_num
        from faq
        ORDER BY reg_date DESC
        LIMIT 10
    </select>
    <select id="getFAQNum" resultType="int">
        select COUNT(*)
        from faq
        <if test="type != 0">WHERE type = #{type}</if>
    </select>
    <select id="validateVendorPassword" resultType="_boolean">
        select EXISTS(select * from vendor WHERE vendor_no = #{vendor_no} AND password = #{password})
    </select>
    <update id="changeVendorPersonalData">
        update vendor
        SET vendor_name = #{name},
            phone       = #{phone}
        WHERE vendor_no = #{vendor_no}
    </update>
    <update id="changeVendorBankData">
        update vendor
        SET bank_name    = #{bankName},
            bank_account = #{bankAccount},
            bank_owner   = #{bankOwner}
        WHERE vendor_no = #{vendor_no}
    </update>
    <update id="changeVendorBusinessData">
        update vendor, store
        SET vendor.vendor_name = #{vendorName},
            store.name         = #{storeName}
        WHERE vendor.vendor_no = #{vendor_no}
          AND store.vendor_no = #{vendor_no}
    </update>
    <select id="getVendorReviewNumber" resultType="int">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select COUNT(*)
        from review
        WHERE store_no = @StoreNo
    </select>
    <select id="getReviewDetailForModal" resultType="VendorStoreManagementReviewDetail"
            resultMap="VendorStoreManagementReviewDetail">
        select review.review_no,
               user.nickname as user_name,
               review.rate,
               review.reg_date,
               review.answer_status,
               review.content,
               review.image_list,
               review.answer_content,
               review.answer_date
        from review,
             user
        WHERE review.review_no = #{review_no}
          AND user.user_no = review.user_no
    </select>
    <select id="getReviewNumberByDataType" resultType="int">
        SET @StoreNo = (select store_no
        from store
        WHERE vendor_no = #{vendor_no});
        select COUNT(*)
        from review
        WHERE store_no = @StoreNo
        <choose>
            <when test="data_type == 2">
                AND answer_status = true
            </when>
            <when test="data_type == 3">
                AND answer_status = false
            </when>
        </choose>
    </select>
    <update id="answerReview">
        update review, point_accumulate
        SET review.answer_content        = #{answer_content},
            review.answer_date           = #{answer_date},
            review.answer_status         = true,
            point_accumulate.answer_date = #{answer_date}
        WHERE review.review_no = #{review_no}
          AND point_accumulate.accumulate_no = review.accumulate_no
    </update>
    <update id="deleteRoom">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        SET @RoomIndex = (select REPLACE(REPLACE(JSON_SEARCH(room_options, 'one', #{goods_name}, null,
                                                             '$[*].name'), '"$[', ''), '].name"', '')
                          from store_lodgement
                          WHERE store_no = @StoreNo);
        update store_lodgement
        SET room_options = JSON_REMOVE(room_options, CONCAT('$[', @RoomIndex, ']'))
        WHERE store_no = @StoreNo
    </update>
    <select id="getVendorStoreType" resultType="int">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select class_first
        from store
        WHERE store_no = @StoreNo
    </select>
    <select id="checkRoomNameExists" resultType="_boolean">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select IF(JSON_SEARCH(room_options, 'one', #{goods_name}, null, '$[*].name') is NULL, false, true)
        from store_lodgement
        WHERE store_no = @StoreNo
    </select>
    <select id="getRoomKeyList" resultType="string">
        select room_options -> '$[*].room_no'
        from store_lodgement
        WHERE store_no = #{store_no}
    </select>
    <update id="registerRoom">
        update store_lodgement
        SET room_options = JSON_ARRAY_APPEND(room_options, '$',
                                             JSON_OBJECT('room_no', #{room.room_no}, 'name', #{room.name},
                                                         'room_explain', #{room.room_explain}, 'price', #{room.price},
                                                         'room_img', #{room.room_img}, 'reg_date', #{room.reg_date}))
        WHERE store_no = #{store_no}
    </update>
    <select id="getVendorStoreNo" resultType="int">
        select store_no
        from store
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="checkRoomNameSameByRoomNo" resultType="_boolean">
        SET @RoomNameIndex =
                (select REPLACE(REPLACE(JSON_SEARCH(room_options, 'one', #{goods_name}, null, '$[*].name'), '"$[', ''),
                                '].name"', '')
                 from store_lodgement
                 WHERE store_no = #{store_no});
        select IF(JSON_EXTRACT(room_options, CONCAT('$[', @RoomNameIndex, '].room_no')) = #{goods_no}, true, false)
        from store_lodgement
        WHERE store_no = #{store_no}
    </select>
    <update id="updateRoom">
        SET @RoomNameIndex =
        (select REPLACE(REPLACE(JSON_SEARCH(room_options, 'one', #{original_goods_name}, null, '$[*].name'),
        '"$[', ''),
        '].name"', '')
        from store_lodgement
        WHERE store_no = #{store_no});
        update store_lodgement
        SET room_options = JSON_REPLACE(room_options, concat('$[', @RoomNameIndex, '].name'), #{room.name}, <if
            test="room.room_img != null">concat('$[', @RoomNameIndex, '].room_img'), #{room.room_img},
    </if> concat('$[', @RoomNameIndex, '].price'), #{room.price}, concat('$[', @RoomNameIndex, '].room_explain'),
        #{room.room_explain}) WHERE store_no = #{store_no}
    </update>
    <select id="getVendorSalesList" resultType="VendorAdminSalesList">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select accumulate_no,
               user.nickname                                as user_name,
               price,
               payback_rate,
               point_accumulate.point,
               point_accumulate.reg_date,
               IF(point_accumulate.status = 4, false, true) as status
        from point_accumulate,
             user
        WHERE store_no = @StoreNo
          AND user.user_no = point_accumulate.user_no
        ORDER BY point_accumulate.reg_date DESC
        LIMIT 10
    </select>
    <select id="getVendorSalesSummary" resultType="VendorSalesPageSummary">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        SET @ThisMonthPrice = (select SUM(price)
                               from point_accumulate
                               WHERE store_no = @StoreNo
                                 AND YEAR(reg_date) = YEAR(CURRENT_DATE)
                                 AND MONTH(reg_date) = MONTH(CURRENT_DATE)
                                 AND status != 4);
        SET @ThisMonthPoint = (select SUM(point)
                               from point_accumulate
                               WHERE store_no = @StoreNo
                                 AND YEAR(reg_date) = YEAR(CURRENT_DATE)
                                 AND MONTH(reg_date) = MONTH(CURRENT_DATE)
                                 AND status != 4);
        select SUM(price)      as total_price,
               SUM(point)      as total_point,
               @ThisMonthPrice as this_month_price,
               @ThisMonthPoint as this_month_point
        from point_accumulate
        WHERE store_no = @StoreNo
          AND status != 4
    </select>
    <select id="getVendorPointChargeListByPaging" resultType="VendorAdminPointChargeList">
        select charge_no, point, reg_date, revise_date, status
        from point_charge
        WHERE vendor_no = #{vendor_no}
        <choose>
            <when test="data_type == 2">AND status = 2</when>
            <when test="data_type == 3">AND status = 3</when>
            <when test="data_type == 4">AND (status = 1 OR status = 4)</when>
            <when test="data_type == 5">AND status = 5</when>
        </choose>
        ORDER BY reg_date DESC
        LIMIT #{start_index}, 10
    </select>
    <select id="getChargeListNumberByDataType" resultType="int">
        select COUNT(*)
        from point_charge
        WHERE vendor_no = #{vendor_no}
        <choose>
            <when test="data_type == 2">AND status = 2</when>
            <when test="data_type == 3">AND status = 3</when>
            <when test="data_type == 4">AND (status = 1 OR status = 4)</when>
            <when test="data_type == 5">AND status = 5</when>
        </choose>
    </select>
    <select id="getVendorPointAccumulateListByPaging" resultType="VendorAdminPointAccumulateList">
        SET @StoreNo = (select store_no
        from store
        WHERE vendor_no = #{vendor_no});
        select accumulate_no,
        user.nickname as user_name,
        price,
        payback_rate,
        point_accumulate.point,
        point_accumulate.reg_date,
        status,
        review_status,
        IF(answer_date is NULL, false, true) as is_answered
        from point_accumulate,
        user
        WHERE point_accumulate.store_no = @StoreNo
        AND user.user_no = point_accumulate.user_no
        <choose>
            <when test="data_type == 2">AND status = 1</when>
            <when test="data_type == 3">AND status = 2</when>
            <when test="data_type == 4">AND status = 3</when>
            <when test="data_type == 5">AND status = 4</when>
            <when test="data_type == 6">AND status = 5</when>
            <when test="data_type == 7">AND review_status = true AND answer_date is null</when>
        </choose>
        ORDER BY point_accumulate.reg_date DESC
        LIMIT #{start_index}, 10
    </select>
    <select id="getAccumulateListNumberByDataType" resultType="int">
        SET @StoreNo = (select store_no
        from store
        WHERE vendor_no = #{vendor_no});
        select COUNT(*)
        from point_accumulate
        WHERE store_no = @StoreNo
        <choose>
            <when test="data_type == 2">AND status = 1</when>
            <when test="data_type == 3">AND status = 2</when>
            <when test="data_type == 4">AND status = 3</when>
            <when test="data_type == 5">AND status = 4</when>
            <when test="data_type == 6">AND status = 5</when>
            <when test="data_type == 7">AND review_status = true AND answer_date is null</when>
        </choose>
    </select>
</mapper>