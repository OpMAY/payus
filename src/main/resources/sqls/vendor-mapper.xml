<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mvsolutions.payus.mapper.VendorMapper">
    <resultMap id="VendorStoreManagementStoreInfo"
               type="com.mvsolutions.payus.model.web.vendor.response.storemanagement.VendorStoreManagementStoreInfo">
        <result column="image_list" property="image_list" typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <resultMap id="VendorStoreManagementStoreDetailInfo"
               type="com.mvsolutions.payus.model.web.vendor.response.storemanagement.VendorStoreManagementStoreDetailInfo">
        <result column="service_list" property="service_list"
                typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
        <result column="information" property="information"
                typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <select id="checkVendorExists" resultType="_boolean">
        select EXISTS(select * from vendor WHERE id = #{id} AND password = #{password})
    </select>
    <select id="loginVendor" resultType="VendorLoginResponse">
        select vendor_no, valid_vendor, vendor_penalty
        from vendor
        WHERE id = #{id}
          AND password = #{password}
    </select>
    <select id="checkVendorPenalty" resultType="_boolean">
        select vendor_penalty
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorName" resultType="string">
        select vendor_name
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorHome" resultType="VendorHomeResponse">
        select name, point, vendor.vendor_no as vendor_no, vendor_name
        from store,
             vendor
        WHERE store.vendor_no = #{vendor_no}
          AND vendor.vendor_no = #{vendor_no}
    </select>
    <select id="getVendorPoint" resultType="SupPointChargeDataResponse">
        select vendor_no, point
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <update id="requestPayback">
        update vendor
        SET point = point - #{point}
        WHERE vendor_no = #{vendor_no}
    </update>
    <select id="getVendorFCMToken" resultType="string">
        select fcm_token
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <update id="updateVendorFcmToken">
        update vendor
        SET fcm_token = #{fcm_token}
        WHERE vendor_no = #{vendor_no}
    </update>
    <select id="findIdVendor" resultType="string">
        select id
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="vendorFindIdPost" resultType="VendorFindIdResponse">
        select vendor_no
        from vendor
        WHERE vendor_name = #{name}
          AND phone = #{phone}
    </select>
    <select id="findPassword" resultType="VendorPasswordFindResponse">
        SET @Vendor_NO = (select vendor_no
                          from vendor
                          WHERE id = #{id});
        select EXISTS(select * from vendor WHERE id = #{id})                    as id_exist,
               IF(EXISTS(select * from vendor WHERE id = #{id}), @Vendor_NO, 0) as vendor_no
    </select>
    <select id="getPasswordFindResult" resultType="VendorPasswordFindResultData">
        select vendor_no, id
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="checkVendorCurrentPassword" resultType="_boolean">
        select IF(password = #{password}, TRUE, FALSE)
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <update id="resetPassword">
        update vendor
        SET password = #{password}
        WHERE vendor_no = #{vendor_no}
    </update>
    <select id="checkVendorExistsByEmail" resultType="_boolean">
        select EXISTS(select * from vendor WHERE id = #{email})
    </select>
    <insert id="insertVendor" useGeneratedKeys="true" keyProperty="vendor_no">
        insert into vendor(id, password, vendor_name, business_code, phone, bank_name, bank_account, bank_owner,
                           reg_date)
        VALUES (#{id}, #{password}, #{vendor_name}, #{business_code}, #{phone}, #{bank_name}, #{bank_account},
                #{bank_owner}, #{reg_date})
    </insert>
    <select id="getVendorInfoForMyPage" resultType="VendorMyPageInfo">
        select id, vendor_name as name, phone, bank_name, bank_account, bank_owner
        from vendor
        WHERE vendor_no = #{vendor_no}
    </select>
    <select id="getVendorBusinessInfoForMyPage" resultType="VendorMyPageBusinessInfo">
        select store.name as store_name, vendor.business_code, vendor.vendor_name
        from store,
             vendor
        WHERE vendor.vendor_no = #{vendor_no}
          AND store.vendor_no = #{vendor_no}
    </select>
    <select id="getVendorStoreInfoForStoreManagement" resultType="VendorStoreManagementStoreInfo"
            resultMap="VendorStoreManagementStoreInfo">
        select store.store_no,
               store.image_list,
               store.name       as store_name,
               store.`explain`,
               store.address,
               store.address_x,
               store.address_y,
               store.address_road,
               vendor.phone,
               store.class_first,
               store.class_second,
               IF(EXISTS(select *
                         from advertisement_store
                         WHERE advertisement_store.store_no = store.store_no
                           AND status = true), advertise_payback,
                  payback_rate) as payback_rate
        from vendor,
             store
                 left join advertisement_store on store.store_no = advertisement_store.store_no
        WHERE vendor.vendor_no = #{vendor_no}
          AND store.vendor_no = #{vendor_no}
    </select>
    <select id="getVendorStoreDetailForStoreManagement" resultType="VendorStoreManagementStoreDetailInfo"
            resultMap="VendorStoreManagementStoreDetailInfo">
        select store.store_no,
               store.class_first,
               store.class_second,
               store.explain,
               store_lodgement.service_list,
               store_lodgement.information
        from store,
             store_lodgement
        WHERE store.vendor_no = #{vendor_no}
          AND store_lodgement.store_no = store.store_no
    </select>
    <select id="getVendorReviewListForStoreManagement" resultType="VendorStoreManagementReviewInfo">
        SET @StoreNo = (select store_no
                        from store
                        WHERE vendor_no = #{vendor_no});
        select review.review_no, review.content, review.rate, user.nickname, review.reg_date, review.answer_status
        from review,
             user
        WHERE review.store_no = @StoreNo
          AND user.user_no = review.user_no
    </select>
</mapper>