<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mvsolutions.payus.mapper.ReviewMapper">
    <resultMap id="VendorReviewContentResponse"
               type="com.mvsolutions.payus.model.rest.response.suphomepage.VendorReviewContentResponse">
        <result column="image_list" property="image_list" typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <resultMap id="UserMyReviewResponse"
               type="com.mvsolutions.payus.model.rest.response.usermypage.UserMyReviewResponse">
        <result column="image_list" property="image_list" typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <resultMap id="StoreReviewPageResponse"
               type="com.mvsolutions.payus.model.rest.response.storedetailpage.StoreReviewPageResponse">
        <result column="image_list" property="image_list" typeHandler="com.mvsolutions.payus.handler.JsonTypeHandler"/>
    </resultMap>
    <select id="getReviewContentFromNotification" resultType="VendorReviewContentResponse"
            resultMap="VendorReviewContentResponse">
        select review_no, user.nickname as user_name, content, rate, review.reg_date
        from review,
             user
        WHERE review_no = #{review_no}
          AND user.user_no = review.user_no
          AND answer_status = false
    </select>
    <select id="checkReviewExists" resultType="_boolean">
        select EXISTS(select * from review WHERE review_no = #{review_no})
    </select>
    <select id="checkReviewAnswered" resultType="_boolean">
        select answer_status
        from review
        WHERE review_no = #{review_no}
    </select>
    <update id="answerReview">
        update review
        SET answer_status  = true,
            answer_content = #{answer_content},
            answer_date    = #{answer_date}
        WHERE review_no = #{review_no}
    </update>
    <select id="getReviewContentFromPointList" resultType="UserMyReviewResponse" resultMap="UserMyReviewResponse">
        select review_no,
               store.name as store_name,
               review.reg_date,
               review.content,
               rate,
               review.image_list,
               answer_status,
               answer_content,
               answer_date
        from review,
             store
        WHERE review.accumulate_no = #{accumulate_no}
          AND store.store_no = review.store_no
    </select>
    <delete id="deleteReviewByUser">
        delete
        from review
        WHERE review_no = #{review_no}
    </delete>
    <select id="getPreDataForReview" resultType="UserReviewPagePreDataResponse">
        select point_accumulate.store_no, store.name as store_name
        from point_accumulate,
             store
        WHERE point_accumulate.accumulate_no = #{accumulate_no}
          AND store.store_no = point_accumulate.store_no
    </select>
    <insert id="uploadReview">
        SET @StoreNo = (select store_no
                        from point_accumulate
                        WHERE accumulate_no = #{accumulate_no});
        insert into review (store_no, user_no, accumulate_no, content, rate, reg_date, image_list)
        VALUES (@StoreNo, #{user_no}, #{accumulate_no}, #{content}, #{rate}, #{reg_date}, #{image_list})
    </insert>
    <select id="getUserMyReviewList" resultType="UserMyReviewResponse" resultMap="UserMyReviewResponse">
        select review_no,
        store.name as store_name,
        review.reg_date,
        review.content,
        rate,
        review.image_list,
        answer_status,
        answer_content,
        answer_date
        from review,
        store
        WHERE review.user_no = #{user_no}
        AND store.store_no = review.store_no
        <choose>
            <when test="review_type == 1">
                AND answer_status = true
            </when>
            <when test="review_type == 2">
                AND answer_status = false
            </when>
        </choose>
        ORDER BY review.reg_date DESC, review.review_no DESC
        LIMIT 10
    </select>
    <select id="getUserMyReviewListReload" resultType="UserMyReviewResponse" resultMap="UserMyReviewResponse">
        SET @RegDate = (select reg_date from review WHERE review_no = #{last_index});
        select review_no,
        store.name as store_name,
        review.reg_date,
        review.content,
        rate,
        review.image_list,
        answer_status,
        answer_content,
        answer_date
        from review,
        store
        WHERE review.user_no = #{user_no}
        AND store.store_no = review.store_no
        AND (review.reg_date <![CDATA[<]]> @RegDate
        OR (review.reg_date <![CDATA[=]]> @RegDate AND review.review_no <![CDATA[<]]> #{last_index}))
        <choose>
            <when test="review_type == 1">
                AND answer_status = true
            </when>
            <when test="review_type == 2">
                AND answer_status = false
            </when>
        </choose>
        ORDER BY review.reg_date DESC, review.review_no DESC
        LIMIT 10
    </select>
    <select id="getStoreReviewNum" resultType="int">
        select COUNT(*)
        from review
        WHERE store_no = #{store_no}
    </select>
    <select id="getStoreReviewList" resultType="StoreReviewPageResponse" resultMap="StoreReviewPageResponse">
        <if test="last_index != 0">
            SET @RegDate = (select reg_date from review WHERE review_no = #{last_index});
        </if>
        select review_no,
        store.name as store_name,
        user.nickname,
        review.reg_date,
        review.content,
        rate,
        review.image_list,
        answer_status,
        answer_content,
        answer_date
        from review,
        store,
        user
        WHERE review.store_no = #{store_no}
        <if test="last_index != 0">
            AND review.reg_date <![CDATA[<]]> @RegDate OR (review.reg_date <![CDATA[=]]>
            AND review_no <![CDATA[<]]> #{last_index})
        </if>
        ORDER BY review.reg_date DESC, review_no DESC LIMIT 10
    </select>
    <select id="getReviewRateSum" resultType="int">
        select SUM(rate)
        from review
        WHERE store_no = #{store_no}
    </select>
    <select id="getStoreNoByReviewNo" resultType="int">
        select store_no
        from review
        WHERE review_no = #{review_no}
    </select>
</mapper>